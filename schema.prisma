generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      =env("DATABASE_URL")
}


model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  hashedPassword  String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Favorite    Favorite[]
  accounts      Account[]
  sessions      Session[] 
  booking Bookings[]
}
model Account{

  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

}
model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id]) 
  
}

model Room{
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name         String  
  description  String
  petsallowed      Boolean?
  roomCount          Int?
  bathroomCount      Int?
  numberofBeds       Int?
  imgSrc           String
  rating             Int?
  airConditioned     Boolean?
  price              Int
  createdAt    DateTime @default(now())
  Favorite   Favorite[]
  address Address[]
  booking Bookings[]
}

model Favorite{
   id             String @id @default(auto()) @map("_id") @db.ObjectId
   userId   String? @db.ObjectId
   user User? @relation(fields: [userId], references: [id]) 
   roomId     String? @db.ObjectId
  room Room? @relation(fields: [roomId], references: [id])  

createdAt DateTime @default(now())
}
model Address{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  country  String
  state    String
  city     String
  roomId     String @db.ObjectId
  room Room @relation(fields: [roomId], references: [id])  
}   

model Bookings {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roomId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


model VerificationRequest {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
